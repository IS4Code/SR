;;
;;  Copyright (C) 2020-2021 Roman Pauer
;;
;;  Permission is hereby granted, free of charge, to any person obtaining a copy of
;;  this software and associated documentation files (the "Software"), to deal in
;;  the Software without restriction, including without limitation the rights to
;;  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
;;  of the Software, and to permit persons to whom the Software is furnished to do
;;  so, subject to the following conditions:
;;
;;  The above copyright notice and this permission notice shall be included in all
;;  copies or substantial portions of the Software.
;;
;;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;  SOFTWARE.
;;

include llasm.llinc
include asm-calls.llinc

func FX_Init_c
funcv FX_Exit_c
func FX_ReserveDevices_c reserve
func FX_ReadLib_c *path
funcv FX_FreeLib_c lib_handle
funcv FX_StopAllSamples_c
func FX_PlaySample_c lib_handle, sample_number, priority, volume, times_play
funcv FX_SetVolume_c volume
func FM_IsError_c

proc FX_Init public

; [esp      ] = return address

        Call_Asm_Stack0 FX_Init_c

        Call_Asm_Return 0

endp ; end procedure FX_Init


proc FX_Exit public

; [esp      ] = return address

        Call_Asm_Stack0_void FX_Exit_c

        Call_Asm_Return 0

endp ; end procedure FX_Exit


proc FX_ReserveDevices public

; [esp +   4] = int reserve
; [esp      ] = return address

        Call_Asm_Stack1 FX_ReserveDevices_c

        Call_Asm_Return 0

endp ; end procedure FX_ReserveDevices


proc FX_ReadLib public

; [esp +   4] = const char * path
; [esp      ] = return address

        Call_Asm_Stack1 FX_ReadLib_c

        Call_Asm_Return 0

endp ; end procedure FX_ReadLib


proc FX_FreeLib public

; [esp +   4] = int lib_handle
; [esp      ] = return address

        Call_Asm_Stack1_void FX_FreeLib_c

        Call_Asm_Return 0

endp ; end procedure FX_FreeLib


proc FX_StopAllSamples public

; [esp      ] = return address

        Call_Asm_Stack0_void FX_StopAllSamples_c

        Call_Asm_Return 0

endp ; end procedure FX_StopAllSamples


proc FX_PlaySample public

; [esp + 5*4] = int times_play
; [esp + 4*4] = int volume
; [esp + 3*4] = int priority
; [esp + 2*4] = int sample_number
; [esp +   4] = int lib_handle
; [esp      ] = return address

        Call_Asm_Stack5 FX_PlaySample_c

        Call_Asm_Return 0

endp ; end procedure FX_PlaySample


proc FX_SetVolume public

; [esp +   4] = unsigned int volume
; [esp      ] = return address

        Call_Asm_Stack1_void FX_SetVolume_c

        Call_Asm_Return 0

endp ; end procedure FX_SetVolume


proc FM_IsError public

; [esp      ] = return address

        Call_Asm_Stack0 FM_IsError_c

        Call_Asm_Return 0

endp ; end procedure FM_IsError


