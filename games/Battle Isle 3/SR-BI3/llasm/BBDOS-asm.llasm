;;
;;  Copyright (C) 2020-2021 Roman Pauer
;;
;;  Permission is hereby granted, free of charge, to any person obtaining a copy of
;;  this software and associated documentation files (the "Software"), to deal in
;;  the Software without restriction, including without limitation the rights to
;;  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
;;  of the Software, and to permit persons to whom the Software is furnished to do
;;  so, subject to the following conditions:
;;
;;  The above copyright notice and this permission notice shall be included in all
;;  copies or substantial portions of the Software.
;;
;;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;  SOFTWARE.
;;

include llasm.llinc
include asm-calls.llinc

func DOS_Init_c
funcv DOS_Exit_c
func DOS_Open_c *path, mode
func DOS_Close_c file_handle
func DOS_Read_c file_handle, *buffer, length
func DOS_Write_c file_handle, *buffer, length
func DOS_Seek_c file_handle, origin, offset
func DOS_ReadFile_c *path, *buffer
func DOS_GetFileLength_c *path

proc DOS_Init public

; [esp      ] = return address

        Call_Asm_Stack0 DOS_Init_c

        Call_Asm_Return 0

endp ; end procedure DOS_Init


proc DOS_Exit public

; [esp      ] = return address

        Call_Asm_Stack0_void DOS_Exit_c

        Call_Asm_Return 0

endp ; end procedure DOS_Exit


proc DOS_Open public

; [esp + 2*4] = unsigned int mode
; [esp +   4] = const char * path
; [esp      ] = return address

        Call_Asm_Stack2 DOS_Open_c

        Call_Asm_Return 0

endp ; end procedure DOS_Open


proc DOS_Close public

; [esp +   4] = int file_handle
; [esp      ] = return address

        Call_Asm_Stack1 DOS_Close_c

        Call_Asm_Return 0

endp ; end procedure DOS_Close


proc DOS_Read public

; [esp + 3*4] = unsigned int length
; [esp + 2*4] = void * buffer
; [esp +   4] = int file_handle
; [esp      ] = return address

        Call_Asm_Stack3 DOS_Read_c

        Call_Asm_Return 0

endp ; end procedure DOS_Read


proc DOS_Write public

; [esp + 3*4] = unsigned int length
; [esp + 2*4] = const void * buffer
; [esp +   4] = int file_handle
; [esp      ] = return address

        Call_Asm_Stack3 DOS_Write_c

        Call_Asm_Return 0

endp ; end procedure DOS_Write


proc DOS_Seek public

; [esp + 3*4] = int offset
; [esp + 2*4] = int origin
; [esp +   4] = int file_handle
; [esp      ] = return address

        Call_Asm_Stack3 DOS_Seek_c

        Call_Asm_Return 0

endp ; end procedure DOS_Seek


proc DOS_ReadFile public

; [esp + 2*4] = void * buffer
; [esp +   4] = const char * path
; [esp      ] = return address

        Call_Asm_Stack2 DOS_ReadFile_c

        Call_Asm_Return 0

endp ; end procedure DOS_ReadFile


proc DOS_GetFileLength public

; [esp +   4] = const char * path
; [esp      ] = return address

        Call_Asm_Stack1 DOS_GetFileLength_c

        Call_Asm_Return 0

endp ; end procedure DOS_GetFileLength


