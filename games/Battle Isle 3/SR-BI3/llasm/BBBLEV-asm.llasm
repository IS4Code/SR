;;
;;  Copyright (C) 2020-2021 Roman Pauer
;;
;;  Permission is hereby granted, free of charge, to any person obtaining a copy of
;;  this software and associated documentation files (the "Software"), to deal in
;;  the Software without restriction, including without limitation the rights to
;;  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
;;  of the Software, and to permit persons to whom the Software is furnished to do
;;  so, subject to the following conditions:
;;
;;  The above copyright notice and this permission notice shall be included in all
;;  copies or substantial portions of the Software.
;;
;;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;  SOFTWARE.
;;

include llasm.llinc
include asm-calls.llinc

func BLEV_Init_c
funcv BLEV_Exit_c
funcv BLEV_ClearAllEvents_c
func BLEV_PutEvent_c *event
func BLEV_GetEvent_c *event
func BLEV_PeekEvent_c *event

proc BLEV_Init public

; [esp      ] = return address

        Call_Asm_Stack0 BLEV_Init_c

        Call_Asm_Return 0

endp ; end procedure BLEV_Init


proc BLEV_Exit public

; [esp      ] = return address

        Call_Asm_Stack0_void BLEV_Exit_c

        Call_Asm_Return 0

endp ; end procedure BLEV_Exit


proc BLEV_ClearAllEvents public

; [esp      ] = return address

        Call_Asm_Stack0_void BLEV_ClearAllEvents_c

        Call_Asm_Return 0

endp ; end procedure BLEV_ClearAllEvents


proc BLEV_PutEvent public

; [esp +   4] = const BLEV_Event * event
; [esp      ] = return address

        Call_Asm_Stack1 BLEV_PutEvent_c

        Call_Asm_Return 0

endp ; end procedure BLEV_PutEvent


proc BLEV_GetEvent public

; [esp +   4] = BLEV_Event * event
; [esp      ] = return address

        Call_Asm_Stack1 BLEV_GetEvent_c

        Call_Asm_Return 0

endp ; end procedure BLEV_GetEvent


proc BLEV_PeekEvent public

; [esp +   4] = BLEV_Event * event
; [esp      ] = return address

        Call_Asm_Stack1 BLEV_PeekEvent_c

        Call_Asm_Return 0

endp ; end procedure BLEV_PeekEvent


