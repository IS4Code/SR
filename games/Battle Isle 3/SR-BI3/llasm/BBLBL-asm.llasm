;;
;;  Copyright (C) 2020-2021 Roman Pauer
;;
;;  Permission is hereby granted, free of charge, to any person obtaining a copy of
;;  this software and associated documentation files (the "Software"), to deal in
;;  the Software without restriction, including without limitation the rights to
;;  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
;;  of the Software, and to permit persons to whom the Software is furnished to do
;;  so, subject to the following conditions:
;;
;;  The above copyright notice and this permission notice shall be included in all
;;  copies or substantial portions of the Software.
;;
;;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;  SOFTWARE.
;;

include llasm.llinc
include asm-calls.llinc

func LBL_Init_c
funcv LBL_Exit_c
func LBL_OpenLib_c *path, param2
funcv LBL_CloseLib_c *lib
func LBL_ReadEntry_c *lib, *entry_data, entry_number, close_file, *entry_metadata
func LBL_GetEntrySize_c *lib, entry_number
funcv LBL_CloseFile_c *lib
func LBL_GetNOFEntries_c *lib

proc LBL_Init public

; [esp      ] = return address

        Call_Asm_Stack0 LBL_Init_c

        Call_Asm_Return 0

endp ; end procedure LBL_Init


proc LBL_Exit public

; [esp      ] = return address

        Call_Asm_Stack0_void LBL_Exit_c

        Call_Asm_Return 0

endp ; end procedure LBL_Exit


proc LBL_OpenLib public

; [esp + 2*4] = int param2
; [esp +   4] = const char * path
; [esp      ] = return address

        Call_Asm_Stack2 LBL_OpenLib_c

        Call_Asm_Return 0

endp ; end procedure LBL_OpenLib


proc LBL_CloseLib public

; [esp +   4] = void * lib
; [esp      ] = return address

        Call_Asm_Stack1_void LBL_CloseLib_c

        Call_Asm_Return 0

endp ; end procedure LBL_CloseLib


proc LBL_ReadEntry public

; [esp + 5*4] = void * entry_metadata
; [esp + 4*4] = int close_file
; [esp + 3*4] = unsigned int entry_number
; [esp + 2*4] = void * entry_data
; [esp +   4] = void * lib
; [esp      ] = return address

        Call_Asm_Stack5 LBL_ReadEntry_c

        Call_Asm_Return 0

endp ; end procedure LBL_ReadEntry


proc LBL_GetEntrySize public

; [esp + 2*4] = unsigned int entry_number
; [esp +   4] = void * lib
; [esp      ] = return address

        Call_Asm_Stack2 LBL_GetEntrySize_c

        Call_Asm_Return 0

endp ; end procedure LBL_GetEntrySize


proc LBL_CloseFile public

; [esp +   4] = void * lib
; [esp      ] = return address

        Call_Asm_Stack1_void LBL_CloseFile_c

        Call_Asm_Return 0

endp ; end procedure LBL_CloseFile


proc LBL_GetNOFEntries public

; [esp +   4] = void * lib
; [esp      ] = return address

        Call_Asm_Stack1 LBL_GetNOFEntries_c

        Call_Asm_Return 0

endp ; end procedure LBL_GetNOFEntries


