;;
;;  Copyright (C) 2021 Roman Pauer
;;
;;  Permission is hereby granted, free of charge, to any person obtaining a copy of
;;  this software and associated documentation files (the "Software"), to deal in
;;  the Software without restriction, including without limitation the rights to
;;  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
;;  of the Software, and to permit persons to whom the Software is furnished to do
;;  so, subject to the following conditions:
;;
;;  The above copyright notice and this permission notice shall be included in all
;;  copies or substantial portions of the Software.
;;
;;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;  SOFTWARE.
;;

include llasm.llinc
include asm-calls.llinc

func CreateFontIndirectA_c *lplf
func DeleteObject_c *ho
func GdiFlush_c
func GetDeviceCaps_c *hdc, index
func GetTextExtentPointA_c *hdc, *lpString, c, *lpsz
func SelectObject_c *hdc, *h
func SetBkMode_c *hdc, mode
func TextOutA_c *hdc, x, y, *lpString, c

proc CreateFontIndirectA_asm2c public

; [esp +   4] = CONST LOGFONTA * lplf
; [esp      ] = return address

        Call_Asm_Stack1 CreateFontIndirectA_c

        Call_Asm_Return 1

endp ; end procedure CreateFontIndirectA_asm2c


proc DeleteObject_asm2c public

; [esp +   4] = HGDIOBJ ho
; [esp      ] = return address

        Call_Asm_Stack1 DeleteObject_c

        Call_Asm_Return 1

endp ; end procedure DeleteObject_asm2c


proc GdiFlush_asm2c public

; [esp      ] = return address

        Call_Asm_Stack0 GdiFlush_c

        Call_Asm_Return 0

endp ; end procedure GdiFlush_asm2c


proc GetDeviceCaps_asm2c public

; [esp + 2*4] = int index
; [esp +   4] = HDC hdc
; [esp      ] = return address

        Call_Asm_Stack2 GetDeviceCaps_c

        Call_Asm_Return 2

endp ; end procedure GetDeviceCaps_asm2c


proc GetTextExtentPointA_asm2c public

; [esp + 4*4] = LPSIZE lpsz
; [esp + 3*4] = int c
; [esp + 2*4] = LPCSTR lpString
; [esp +   4] = HDC hdc
; [esp      ] = return address

        Call_Asm_Stack4 GetTextExtentPointA_c

        Call_Asm_Return 4

endp ; end procedure GetTextExtentPointA_asm2c


proc SelectObject_asm2c public

; [esp + 2*4] = HGDIOBJ h
; [esp +   4] = HDC hdc
; [esp      ] = return address

        Call_Asm_Stack2 SelectObject_c

        Call_Asm_Return 2

endp ; end procedure SelectObject_asm2c


proc SetBkMode_asm2c public

; [esp + 2*4] = int mode
; [esp +   4] = HDC hdc
; [esp      ] = return address

        Call_Asm_Stack2 SetBkMode_c

        Call_Asm_Return 2

endp ; end procedure SetBkMode_asm2c


proc TextOutA_asm2c public

; [esp + 5*4] = int c
; [esp + 4*4] = LPCSTR lpString
; [esp + 3*4] = int y
; [esp + 2*4] = int x
; [esp +   4] = HDC hdc
; [esp      ] = return address

        Call_Asm_Stack5 TextOutA_c

        Call_Asm_Return 5

endp ; end procedure TextOutA_asm2c


