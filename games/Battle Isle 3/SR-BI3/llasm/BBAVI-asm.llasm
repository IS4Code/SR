;;
;;  Copyright (C) 2020-2021 Roman Pauer
;;
;;  Permission is hereby granted, free of charge, to any person obtaining a copy of
;;  this software and associated documentation files (the "Software"), to deal in
;;  the Software without restriction, including without limitation the rights to
;;  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
;;  of the Software, and to permit persons to whom the Software is furnished to do
;;  so, subject to the following conditions:
;;
;;  The above copyright notice and this permission notice shall be included in all
;;  copies or substantial portions of the Software.
;;
;;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;  SOFTWARE.
;;

include llasm.llinc
include asm-calls.llinc

func AVI_Init_c
funcv AVI_Exit_c
funcv AVI_SetDestortionLevel_c destortionLevel
func AVI_OpenVideo_c *path, *param2
funcv AVI_CloseVideo_c *video
func AVI_PlayVideo_c *video, x, y, param4, param5, volume, flags

proc AVI_Init public

; [esp      ] = return address

        Call_Asm_Stack0 AVI_Init_c

        Call_Asm_Return 0

endp ; end procedure AVI_Init


proc AVI_Exit public

; [esp      ] = return address

        Call_Asm_Stack0_void AVI_Exit_c

        Call_Asm_Return 0

endp ; end procedure AVI_Exit


proc AVI_SetDestortionLevel public

; [esp +   4] = int destortionLevel
; [esp      ] = return address

        Call_Asm_Stack1_void AVI_SetDestortionLevel_c

        Call_Asm_Return 0

endp ; end procedure AVI_SetDestortionLevel


proc AVI_OpenVideo public

; [esp + 2*4] = const uint8_t * param2
; [esp +   4] = const char * path
; [esp      ] = return address

        Call_Asm_Stack2 AVI_OpenVideo_c

        Call_Asm_Return 0

endp ; end procedure AVI_OpenVideo


proc AVI_CloseVideo public

; [esp +   4] = void * video
; [esp      ] = return address

        Call_Asm_Stack1_void AVI_CloseVideo_c

        Call_Asm_Return 0

endp ; end procedure AVI_CloseVideo


proc AVI_PlayVideo public

; [esp + 7*4] = unsigned int flags
; [esp + 6*4] = int volume
; [esp + 5*4] = int param5
; [esp + 4*4] = int param4
; [esp + 3*4] = int y
; [esp + 2*4] = int x
; [esp +   4] = void * video
; [esp      ] = return address

        Call_Asm_Stack7 AVI_PlayVideo_c

        Call_Asm_Return 0

endp ; end procedure AVI_PlayVideo


